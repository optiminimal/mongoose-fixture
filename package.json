{
  "name": "mongoose-fixture",
  "preferGlobal": true,
  "version": "0.1.3",
  "author": {
    "name": "Morgan Craft",
    "url": "http://morgancraft.com"
  },
  "description": "Static Fixture Loader with Mongoose Schema",
  "main": "./lib/index.js",
  "bin": {
    "mongoose-fixture": "./bin/mongoose-fixture"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mgan59/mongoose-fixture.git"
  },
  "keywords": [
    "cli",
    "mongoose",
    "fixture"
  ],
  "dependencies": {
    "optimist": "0.3.5",
    "mongoose": "3.5.7",
    "async": "0.2.5"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# Mongoose-Fixture\n\nInspired from Django's data-fixtures and Ruby's rake.  Mongoose-Fixture is a command-line interface and utility library to load documents from files into mongodb using mongoose schemas and static json arrays/documents.\n\nCan't I import static json into mongo using \n\n    mongoimport --collection collectionName --file collection.json\n\nYes, that does work.  But over time that method can become complex to manage.  \n\nMongoose-Fixture provides more robust features such as:\n\n* Project Configuration, organize collections into sets\n* BoilerPlates, generate Schemas/Fixtures to reduce typing\n* Programming Interface that can be run from within nodejs\n\n\n## Installation\n\nRecommend global install as this package contains a bin command that can be used globally accepting configuration files\n\n    npm install mongoose-fixture -g\n\n## Getting Started \n\nIn order to get started with Mongoose-Fixture we first must create our config-file and then define our fixtures/schemas.\n\n### Creating a ConfigFile\n\nMongoose-Fixture cmd usage requires the creation of a config-file for each project.  This config file specifies where and how to load fixtures/schemas as well as the boiler-plate generators.\n\nFirst you must create this config file, ``cd`` to your projects local-root directory.\n\n    mongoose-fixture --generateConfig\n\nThis will create a file in the local directory called ``mongoose-fixture-config.js`` with a few default directories set for ``fixtures/`` and ``schemas``.  Feel free to change these values to where you want your mongoose-fixtures.\n\n\nBy default ``mongoose-fixture`` will look for a config file in the local directory called ``mongoose-fixture-config`` if you have different file name or wish to use ``mongoose-fixture`` with a different config you can specifiy the config in the cmd\n\n    mongoose-fixture --configFile='/project/outDoorCamper/mf-config'\n\n### Creating our Fixtures/Schemas\n\nOnce we have created our config file for our project we can now begin creating our fixtures/schemas - assuming you are fine with the default config paths and have created the directories.\n\nOnce again we can generate boiler-plates for our schemas and fixtures\n\nFirst we will create a Schema, lets pretend we are building an ecommerece store so we generate a schema for our ``Products``\n\n    mongoose-fixture --generateSchema='ProductSchema'\n\nThis should create a file called ``ProductSchema.js`` in your ``schemas/`` project directory.\n\nThen we should create our corresponding data-fixture\n\n    mongoose-fixture --generateFixture='Products'\n\nwhich will create a file ``products.js`` in the ``fixtures/`` directory.\n\nFrom here you should first edit your ``ProductSchema.js`` and create the schema you want based on the [mongoose-documentation](http://mongoosejs.com/docs/guide.html).\n\nThen you should edit your corresponding data-fixture to follow the defined schema.  Any field you add to your data-fixture objects that aren't part of the schema will be ignored when loaded into mongoDB.\n\n### Updating your Config with Fixture/Schema\n\nInside of your config file you will need to add you newly created schema/fixture pair to a FixtureListing.\n\n    // create our primary listing set\n    var allFixtures = [{\n        itemName:'Products', \n        schema:'ProductSchema',\n        data:'Products',\n        collection:'products'\n    }];\n\nYou should now be all set to load your fixture data.\n\n\n## Loading Fixtures into MongoDB\n\nTo interact with your fixtures/schemas you will need to use two parameter flags.\n\n* --fixture listing\n** defines which collection of fixtures you want the ``method`` to use\n* method [--add, --remove, --reset] to be defined.\n** reset first does --remove and then does --add behind the scenes\n\n\nexamples assume you have ``mongoose-fixture-config.js`` in local dir:\n\n    //  loads fixture 'all' and just adds the documents\n    mongoose-fixture --fixture='all' --add\n\n    // removes only the documents from the collections define in the fixture 'stores' in the config\n    mongoose-fixture --fixture='stores' --remove \n\n    // can run fixtures for an entire different project using a different command\n    // using the reset would drop all the documents from the collections in fixture catalog and then reload them\n    mongoose-fixture --fixture='catalog' --reset\n\n\n\n",
  "_id": "mongoose-fixture@0.1.3",
  "_from": "mongoose-fixture"
}
